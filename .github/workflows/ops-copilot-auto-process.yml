name: Operations - Copilot Auto Process
permissions:
  contents: write
  issues: write
  pull-requests: write

# Automatic processing of issues assigned to GitHub Copilot
# Supports multiple trigger modes for flexibility and cost control
on:
  # Trigger 1: When issue is labeled (for urgent processing)
  issues:
    types: [labeled]
  
  # Trigger 2: Scheduled batch processing (every 4 hours)
  schedule:
    - cron: '0 */4 * * *'
  
  # Trigger 3: Manual dispatch for testing and specific issues
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Specific issue number to process (optional)'
        required: false
        type: number
      specialist_filter:
        description: 'Filter by specialist type'
        required: false
        type: choice
        options:
          - ''
          - intelligence-analyst
          - osint-researcher
          - target-profiler
          - business-analyst
      batch_size:
        description: 'Maximum issues to process in batch mode'
        required: false
        type: number
        default: 5
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false

jobs:
  # Job 1: Check if processing is needed
  check-processing-needed:
    name: Check Copilot Assignment
    runs-on: ubuntu-latest
    outputs:
      should_process: ${{ steps.check.outputs.should_process }}
      issue_number: ${{ steps.check.outputs.issue_number }}
      is_urgent: ${{ steps.check.outputs.is_urgent }}
      specialist_type: ${{ steps.check.outputs.specialist_type }}
    
    steps:
      - name: Check trigger conditions
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHOULD_PROCESS="false"
          ISSUE_NUMBER=""
          IS_URGENT="false"
          SPECIALIST_TYPE=""
          
          # Manual dispatch with specific issue
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.issue_number }}" ]; then
            echo "Manual dispatch for issue #${{ github.event.inputs.issue_number }}"
            SHOULD_PROCESS="true"
            ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
            SPECIALIST_TYPE="${{ github.event.inputs.specialist_filter }}"
          
          # Issue labeled (urgent processing)
          elif [ "${{ github.event_name }}" = "issues" ]; then
            LABEL="${{ github.event.label.name }}"
            ASSIGNEE="${{ github.event.issue.assignee.login }}"
            
            echo "Issue event - Label: $LABEL, Assignee: $ASSIGNEE"
            
            # Check if assigned to Copilot and has urgent/process-now label
            if [[ "$ASSIGNEE" == "github-copilot[bot]" ]] && [[ "$LABEL" =~ ^(urgent|process-now|copilot-process)$ ]]; then
              echo "Urgent Copilot issue detected"
              SHOULD_PROCESS="true"
              ISSUE_NUMBER="${{ github.event.issue.number }}"
              IS_URGENT="true"
              
              # Detect specialist type from labels
              LABELS="${{ join(github.event.issue.labels.*.name, ' ') }}"
              if [[ "$LABELS" =~ intelligence-analyst ]]; then
                SPECIALIST_TYPE="intelligence-analyst"
              elif [[ "$LABELS" =~ osint-researcher ]]; then
                SPECIALIST_TYPE="osint-researcher"
              elif [[ "$LABELS" =~ target-profiler ]]; then
                SPECIALIST_TYPE="target-profiler"
              fi
            fi
          
          # Scheduled batch processing
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "Scheduled batch processing"
            SHOULD_PROCESS="true"
            # Batch mode - will find issues automatically
          
          # Manual dispatch batch mode
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -z "${{ github.event.inputs.issue_number }}" ]; then
            echo "Manual batch processing"
            SHOULD_PROCESS="true"
            SPECIALIST_TYPE="${{ github.event.inputs.specialist_filter }}"
          fi
          
          echo "should_process=$SHOULD_PROCESS" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "is_urgent=$IS_URGENT" >> $GITHUB_OUTPUT
          echo "specialist_type=$SPECIALIST_TYPE" >> $GITHUB_OUTPUT
          
          echo "Processing needed: $SHOULD_PROCESS"
          if [ -n "$ISSUE_NUMBER" ]; then
            echo "Target issue: #$ISSUE_NUMBER"
          fi

  # Job 2: Process Copilot-assigned issues
  process-copilot-issues:
    name: Process Copilot Issues
    needs: check-processing-needed
    if: needs.check-processing-needed.outputs.should_process == 'true'
    runs-on: ubuntu-latest
    outputs:
      processed_count: ${{ steps.process.outputs.processed_count }}
      success_count: ${{ steps.process.outputs.success_count }}
      pr_numbers: ${{ steps.process.outputs.pr_numbers }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Set up environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
        run: |
          cat > .env << EOF
          GITHUB_TOKEN=${GITHUB_TOKEN}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
          GOOGLE_API_KEY=${GOOGLE_API_KEY}
          GOOGLE_SEARCH_ENGINE_ID=${GOOGLE_SEARCH_ENGINE_ID}
          EOF
      
      - name: Process Copilot issues
        id: process
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Build command arguments
          ARGS="--config config.yaml --verbose"
          
          # Specific issue or batch mode
          if [ -n "${{ needs.check-processing-needed.outputs.issue_number }}" ]; then
            ARGS="${ARGS} --issue ${{ needs.check-processing-needed.outputs.issue_number }}"
            echo "🎯 Processing specific issue #${{ needs.check-processing-needed.outputs.issue_number }}"
          else
            BATCH_SIZE="${{ github.event.inputs.batch_size || 5 }}"
            ARGS="${ARGS} --batch-size ${BATCH_SIZE}"
            echo "📦 Batch processing mode (max ${BATCH_SIZE} issues)"
          fi
          
          # Add specialist filter if provided
          if [ -n "${{ needs.check-processing-needed.outputs.specialist_type }}" ]; then
            ARGS="${ARGS} --specialist-filter ${{ needs.check-processing-needed.outputs.specialist_type }}"
            echo "🎓 Filtering for specialist: ${{ needs.check-processing-needed.outputs.specialist_type }}"
          fi
          
          # Add dry-run flag if enabled
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            ARGS="${ARGS} --dry-run"
            echo "🔍 Running in dry-run mode - no changes will be made"
          else
            echo "🚀 Running in live mode - changes will be committed"
          fi
          
          # Continue on error for batch processing
          ARGS="${ARGS} --continue-on-error"
          
          # Execute processing
          echo "Executing: python main.py process-copilot-issues ${ARGS}"
          OUTPUT=$(python main.py process-copilot-issues ${ARGS} 2>&1 | tee /tmp/process_output.log)
          EXIT_CODE=$?
          
          # Extract metrics from output
          PROCESSED=$(echo "$OUTPUT" | grep -o "Processed: [0-9]*" | grep -o "[0-9]*" | tail -1 || echo "0")
          SUCCESS=$(echo "$OUTPUT" | grep -o "Success rate: [0-9\.]*" | grep -o "[0-9\.]*" | tail -1 || echo "0")
          
          echo "processed_count=$PROCESSED" >> $GITHUB_OUTPUT
          echo "success_count=$SUCCESS" >> $GITHUB_OUTPUT
          
          # Save output for summary
          cat /tmp/process_output.log > /tmp/summary.txt
          
          exit $EXIT_CODE
      
      - name: Create Pull Requests for deliverables
        if: success() && github.event.inputs.dry_run != 'true'
        id: create-prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find branches created by the processor
          BRANCHES=$(git branch -r | grep "origin/.*issue-" | grep -E "(intelligence|osint|profiling|specialist)/" || true)
          
          if [ -z "$BRANCHES" ]; then
            echo "No new branches found - no PRs to create"
            exit 0
          fi
          
          PR_NUMBERS=""
          
          for BRANCH in $BRANCHES; do
            BRANCH_NAME=$(echo $BRANCH | sed 's|origin/||')
            
            # Extract issue number from branch name
            ISSUE_NUM=$(echo $BRANCH_NAME | grep -o 'issue-[0-9]*' | grep -o '[0-9]*' || echo "")
            
            if [ -z "$ISSUE_NUM" ]; then
              continue
            fi
            
            # Check if PR already exists
            EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' || echo "")
            
            if [ -n "$EXISTING_PR" ]; then
              echo "PR already exists for $BRANCH_NAME: #$EXISTING_PR"
              PR_NUMBERS="${PR_NUMBERS}${EXISTING_PR},"
              continue
            fi
            
            # Create PR
            PR_TITLE="🤖 Copilot Analysis for Issue #${ISSUE_NUM}"
            PR_BODY="Automated analysis and deliverables generated by GitHub Copilot for issue #${ISSUE_NUM}.

## Summary
- **Source Issue:** #${ISSUE_NUM}
- **Specialist Type:** $(echo $BRANCH_NAME | cut -d'/' -f1)
- **Processing Mode:** ${{ needs.check-processing-needed.outputs.is_urgent == 'true' && 'Urgent (instant)' || 'Scheduled batch' }}
- **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## Deliverables
Check the files changed in this PR for the complete analysis and reports.

## Review Checklist
- [ ] Review AI-generated content for accuracy
- [ ] Verify entity extractions and relationships
- [ ] Validate recommendations
- [ ] Approve and merge when satisfied

---
*Automatically generated by [ops-copilot-auto-process](.github/workflows/ops-copilot-auto-process.yml)*"
            
            PR_NUMBER=$(gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --head "$BRANCH_NAME" \
              --base main \
              --label "copilot-analysis,automated" \
              --json number --jq '.number' || echo "")
            
            if [ -n "$PR_NUMBER" ]; then
              echo "✅ Created PR #$PR_NUMBER for issue #$ISSUE_NUM"
              PR_NUMBERS="${PR_NUMBERS}${PR_NUMBER},"
              
              # Link PR to issue
              gh issue comment $ISSUE_NUM --body "🤖 **Copilot Analysis Complete!**

Your issue has been processed by the AI specialist. Review the results in PR #${PR_NUMBER}.

**Next Steps:**
1. Review the analysis and deliverables
2. Provide feedback if needed
3. Approve and merge the PR

[View Pull Request →](https://github.com/${{ github.repository }}/pull/${PR_NUMBER})" || true
            fi
          done
          
          echo "pr_numbers=${PR_NUMBERS%,}" >> $GITHUB_OUTPUT
      
      - name: Upload processing logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: copilot-processing-logs
          path: /tmp/process_output.log
          retention-days: 7

  # Job 3: Summary and notifications
  summary:
    name: Processing Summary
    needs: [check-processing-needed, process-copilot-issues]
    if: always() && needs.check-processing-needed.outputs.should_process == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🤖 Copilot Auto-Processing Summary
          
          ## Trigger Information
          - **Event:** ${{ github.event_name }}
          - **Mode:** ${{ needs.check-processing-needed.outputs.issue_number && 'Single Issue' || 'Batch Processing' }}
          - **Urgent:** ${{ needs.check-processing-needed.outputs.is_urgent }}
          
          ## Processing Results
          - **Issues Processed:** ${{ needs.process-copilot-issues.outputs.processed_count || 0 }}
          - **Success Rate:** ${{ needs.process-copilot-issues.outputs.success_count || 0 }}%
          - **PRs Created:** ${{ needs.process-copilot-issues.outputs.pr_numbers && '✅' || '❌' }}
          
          EOF
          
          # Add PR links if available
          if [ -n "${{ needs.process-copilot-issues.outputs.pr_numbers }}" ]; then
            echo "## Pull Requests" >> $GITHUB_STEP_SUMMARY
            IFS=',' read -ra PRS <<< "${{ needs.process-copilot-issues.outputs.pr_numbers }}"
            for PR in "${PRS[@]}"; do
              echo "- [PR #${PR}](https://github.com/${{ github.repository }}/pull/${PR})" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Add specialist info if available
          if [ -n "${{ needs.check-processing-needed.outputs.specialist_type }}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Specialist Filter:** ${{ needs.check-processing-needed.outputs.specialist_type }}" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Comment on urgent issues
        if: needs.check-processing-needed.outputs.is_urgent == 'true' && needs.check-processing-needed.outputs.issue_number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS="${{ needs.process-copilot-issues.result }}"
          ISSUE_NUM="${{ needs.check-processing-needed.outputs.issue_number }}"
          
          if [ "$STATUS" = "success" ]; then
            gh issue comment $ISSUE_NUM --body "⚡ **Urgent Processing Complete!**

Your issue was processed immediately due to the urgent label.

**Status:** ✅ Success
**Processing Time:** ~2-5 minutes
**PRs:** ${{ needs.process-copilot-issues.outputs.pr_numbers && 'Created' || 'None' }}

Check the pull requests linked above for the complete analysis." || true
          else
            gh issue comment $ISSUE_NUM --body "⚠️ **Urgent Processing Failed**

There was an issue processing your request. Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

You can retry by:
1. Removing the urgent label
2. Re-adding the urgent label
Or manually trigger processing from the Actions tab." || true
          fi
