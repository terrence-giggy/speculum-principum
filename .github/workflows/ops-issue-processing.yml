name: Operations -3 Issue Processing
permissions:
  contents: write  # Required for pushing commits with generated deliverables
  issues: write
  pull-requests: read

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process (optional)'
        required: false
        type: number
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: true

jobs:
  check-issues:
    name: Check for Site Monitor Issues
    runs-on: ubuntu-latest
    outputs:
      issues_to_process: ${{ steps.find-issues.outputs.issues }}
      should_process: ${{ steps.find-issues.outputs.should_process }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Find issues to process
        id: find-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Python-based issue checking
          python3 << 'EOF'
          import os
          import json
          import sys
          from github import Github
          
          def main():
              # Get GitHub token and repository from environment
              token = os.environ.get('GITHUB_TOKEN')
              repo_name = os.environ.get('GITHUB_REPOSITORY')
              
              if not token or not repo_name:
                  print("Missing required environment variables", file=sys.stderr)
                  sys.exit(1)
              
              # Initialize GitHub client
              g = Github(token)
              repo = g.get_repo(repo_name)
              
              # Find open issues with site-monitor label
              issues_to_process = []
              
              # Check if this was triggered by a specific issue
              if os.environ.get('GITHUB_EVENT_NAME') == 'issues':
                  event_path = os.environ.get('GITHUB_EVENT_PATH')
                  if event_path and os.path.exists(event_path):
                      with open(event_path, 'r') as f:
                          event_data = json.load(f)
                      
                      issue = event_data.get('issue', {})
                      labels = [label['name'] for label in issue.get('labels', [])]
                      
                      # Only process if it has site-monitor label
                      if 'site-monitor' in labels:
                          issues_to_process.append({
                              'number': issue['number'],
                              'title': issue['title'],
                              'labels': labels
                          })
              else:
                  # Manual dispatch or scheduled - find all site-monitor issues
                  site_monitor_issues = repo.get_issues(
                      state='open',
                      labels=['site-monitor']
                  )
                  
                  for issue in site_monitor_issues:
                      # Skip if already assigned to the bot (processing in progress)
                      if issue.assignee and issue.assignee.login == 'github-actions[bot]':
                          continue
                      
                      issues_to_process.append({
                          'number': issue.number,
                          'title': issue.title,
                          'labels': [label.name for label in issue.labels]
                      })
              
              # Output results for GitHub Actions
              if issues_to_process:
                  print(f"::set-output name=issues::{json.dumps(issues_to_process)}")
                  print(f"::set-output name=should_process::true")
                  print(f"Found {len(issues_to_process)} issues to process:")
                  for issue in issues_to_process:
                      print(f"  - #{issue['number']}: {issue['title']}")
              else:
                  print(f"::set-output name=issues::[]")
                  print(f"::set-output name=should_process::false")
                  print("No issues found to process")
          
          if __name__ == '__main__':
              main()
          EOF

  process-issues:
    name: Process Issues
    runs-on: ubuntu-latest
    needs: check-issues
    if: needs.check-issues.outputs.should_process == 'true' && needs.check-issues.outputs.issues_to_process != '' && needs.check-issues.outputs.issues_to_process != '[]'
    
    strategy:
      matrix:
        issue: ${{ fromJson(needs.check-issues.outputs.issues_to_process || '[]') }}
      fail-fast: false
      max-parallel: 3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT || secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Set up environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
        run: |
          # Create .env file for local processing
          cat > .env << EOF
          GITHUB_TOKEN=${GITHUB_TOKEN}
          GOOGLE_API_KEY=${GOOGLE_API_KEY}
          GOOGLE_SEARCH_ENGINE_ID=${GOOGLE_SEARCH_ENGINE_ID}
          EOF
      
      - name: Process issue
        id: process
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ matrix.issue.number }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          echo "Processing issue #${ISSUE_NUMBER}: ${{ matrix.issue.title }}"
          
          # Determine if this is a dry run
          if [ "${DRY_RUN}" = "true" ]; then
            DRY_RUN_FLAG="--dry-run"
            echo "Running in dry-run mode"
          else
            DRY_RUN_FLAG=""
            echo "Running in live mode"
          fi
          
          # Run the issue processor
          python main.py process-issues \
            --config config.yaml \
            --issue ${ISSUE_NUMBER} \
            ${DRY_RUN_FLAG}
      
      - name: Commit and push changes
        if: success() && github.event.inputs.dry_run != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_PAT || secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ matrix.issue.number }}
        run: |
          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing..."
            
            # Add all changes
            git add .
            
            # Commit with issue reference
            git commit -m "docs: automated processing for issue #${ISSUE_NUMBER}
            
            - Generated deliverables for issue #${ISSUE_NUMBER}
            - Applied workflow-based document generation
            - Automated via GitHub Actions
            
            Closes #${ISSUE_NUMBER}"
            
            # Push changes
            git push origin main
            
            echo "Changes committed and pushed successfully"
          else
            echo "No changes to commit"
          fi
      
      - name: Report processing results
        if: always()
        env:
          ISSUE_NUMBER: ${{ matrix.issue.number }}
          JOB_STATUS: ${{ job.status }}
        run: |
          echo "Issue #${ISSUE_NUMBER} processing completed with status: ${JOB_STATUS}"
          
          if [ "${JOB_STATUS}" = "success" ]; then
            echo "✅ Successfully processed issue #${ISSUE_NUMBER}"
          else
            echo "❌ Failed to process issue #${ISSUE_NUMBER}"
          fi

  summary:
    name: Processing Summary
    runs-on: ubuntu-latest
    needs: [check-issues, process-issues]
    if: always()
    
    steps:
      - name: Generate summary
        env:
          CHECK_RESULT: ${{ needs.check-issues.result }}
          PROCESS_RESULT: ${{ needs.process-issues.result }}
          ISSUES_JSON: ${{ needs.check-issues.outputs.issues_to_process }}
        run: |
          echo "## Issue Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${CHECK_RESULT}" = "success" ]; then
            echo "✅ Issue discovery completed successfully" >> $GITHUB_STEP_SUMMARY
            # Calculate issues count in shell
            if [ -n "${ISSUES_JSON}" ] && [ "${ISSUES_JSON}" != "null" ]; then
              ISSUES_COUNT=$(echo "${ISSUES_JSON}" | jq '. | length' 2>/dev/null || echo "0")
            else
              ISSUES_COUNT=0
            fi
            echo "📊 Found ${ISSUES_COUNT} issues to process" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Issue discovery failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${PROCESS_RESULT}" = "success" ]; then
            echo "✅ All issues processed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${PROCESS_RESULT}" = "failure" ]; then
            echo "⚠️ Some issues failed to process (check individual job logs)" >> $GITHUB_STEP_SUMMARY
          elif [ "${PROCESS_RESULT}" = "skipped" ]; then
            echo "⏭️ No issues required processing" >> $GITHUB_STEP_SUMMARY
          else
            echo "❓ Processing status unclear" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY