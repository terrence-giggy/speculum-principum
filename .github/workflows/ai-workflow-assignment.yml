name: AI Workflow Assignment

on:
  issues:
    types: [opened, labeled]
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Specific issue number to process'
        required: false
        type: string
      dry_run:
        description: 'Run without making changes'
        type: boolean
        default: false
      use_ai:
        description: 'Use AI analysis (requires GitHub Models access)'
        type: boolean
        default: true

jobs:
  assign-workflows:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'site-monitor'))
    
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Run AI Workflow Assignment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          # GitHub Models API is available with GITHUB_TOKEN in Actions
        run: |
          # Prepare command arguments
          ai_flag=""
          dry_run_flag=""
          issue_arg=""
          
          if [ "${{ github.event.inputs.use_ai }}" == "true" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            ai_flag="--ai"
          fi
          
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            dry_run_flag="--dry-run"
          fi
          
          if [ "${{ github.event_name }}" == "issues" ]; then
            # Process specific issue that triggered the workflow
            issue_arg="--limit 1"
            echo "Processing issue #${{ github.event.issue.number }} that triggered the workflow"
          elif [ -n "${{ github.event.inputs.issue_number }}" ]; then
            # Process specific issue from manual trigger (not directly supported yet)
            issue_arg="--limit 1"
            echo "Processing issue #${{ github.event.inputs.issue_number }}"
          else
            # Process batch of unassigned issues
            issue_arg="--limit 10"
            echo "Processing batch of unassigned site-monitor issues"
          fi
          
          # Run the assignment command
          python main.py assign-workflows \
            --config config.yaml \
            $ai_flag \
            $dry_run_flag \
            $issue_arg \
            --verbose
      
      - name: Upload Assignment Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-assignment-report-${{ github.run_id }}
          path: |
            logs/assignment_*.json
            site_monitor.log
          if-no-files-found: ignore
          retention-days: 7
      
      - name: Comment on triggering issue
        if: |
          github.event_name == 'issues' && 
          (success() || failure())
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Completed' : '‚ùå Failed';
            const aiEnabled = '${{ github.event.inputs.use_ai }}' !== 'false' ? 'AI-enhanced' : 'Label-based';
            
            const body = `ü§ñ **Workflow Assignment ${status}**

**Agent Type:** ${aiEnabled}
**Trigger:** Issue created/labeled
**Run Details:** [View workflow run](${runUrl})

The workflow assignment agent has processed this issue. Check the run logs for details about any workflow assignments or requests for clarification.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });