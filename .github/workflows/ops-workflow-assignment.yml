name: Operations · Workflow Assignment

permissions:
  contents: read
  issues: write

on:
  # Trigger when new site-monitor issues are created
  issues:
    types: [opened, labeled]
  
  # Allow manual execution
  workflow_dispatch:
    inputs:
      limit:
        description: 'Maximum number of issues to process'
        required: false
        type: number
        default: 10
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: true
      verbose:
        description: 'Show detailed progress information'
        required: false
        type: boolean
        default: true
      statistics_only:
        description: 'Only show statistics without processing issues'
        required: false
        type: boolean
        default: false

  # Schedule to run every 2 hours to catch unassigned issues
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours

jobs:
  # Job to check if workflow assignment is needed
  check-assignment-needed:
    name: Check if Workflow Assignment is Needed
    runs-on: ubuntu-latest
    outputs:
      should_assign: ${{ steps.discovery.outputs.should_assign }}
      discovery_count: ${{ steps.discovery.outputs.discovery_count }}
      triage_count: ${{ steps.discovery.outputs.triage_count }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate required secrets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        set -euo pipefail
        missing=0

        check_secret() {
          local name="$1"
          local value="$2"
          if [ -z "$value" ]; then
            echo "::error::Missing required secret: ${name}"
            missing=1
          fi
        }

        check_secret "GITHUB_TOKEN" "$GITHUB_TOKEN"
        check_secret "GOOGLE_API_KEY" "$GOOGLE_API_KEY"
        check_secret "GOOGLE_SEARCH_ENGINE_ID" "$GOOGLE_SEARCH_ENGINE_ID"

        if [ -z "$OPENAI_API_KEY" ] && [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "::error::At least one of OPENAI_API_KEY or ANTHROPIC_API_KEY must be configured."
          missing=1
        fi

        if [ "$missing" -ne 0 ]; then
          echo "::error::Secret validation failed."
          exit 1
        fi

    - name: Detect discovery-state issues
      id: discovery
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔎 Counting open issues tagged with state::discovery…"
        DISCOVERY_JSON=$(gh issue list --state open --label "state::discovery" --json number --limit 200)
        DISCOVERY_COUNT=$(echo "$DISCOVERY_JSON" | python -c 'import sys, json; data = json.loads(sys.stdin.read() or "[]"); print(len(data))')
        echo "discovery_count=$DISCOVERY_COUNT" >> $GITHUB_OUTPUT

        echo "🔎 Counting open issues still carrying monitor::triage…"
        TRIAGE_JSON=$(gh issue list --state open --label "monitor::triage" --json number --limit 200)
        TRIAGE_COUNT=$(echo "$TRIAGE_JSON" | python -c 'import sys, json; data = json.loads(sys.stdin.read() or "[]"); print(len(data))')
        echo "triage_count=$TRIAGE_COUNT" >> $GITHUB_OUTPUT

        if [ "$DISCOVERY_COUNT" -gt 0 ]; then
          echo "should_assign=true" >> $GITHUB_OUTPUT
          echo "Found $DISCOVERY_COUNT discovery-state issues awaiting assignment"
        else
          echo "should_assign=false" >> $GITHUB_OUTPUT
          echo "No discovery-state issues require assignment"
        fi

  # Job to assign workflows to issues
  assign-workflows:
    name: Assign Workflows to Issues
    runs-on: ubuntu-latest
    needs: check-assignment-needed
    if: |
      github.event_name == 'workflow_dispatch' ||
      needs.check-assignment-needed.outputs.should_assign == 'true' ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'state::discovery'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Show Statistics (if requested)
      if: github.event.inputs.statistics_only == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      run: |
        echo "🔍 Showing workflow assignment statistics..."
        python main.py assign-workflows --config config.yaml --statistics --verbose
    
    - name: Assign Workflows (Dry Run)
      if: |
        github.event.inputs.statistics_only != 'true' && 
        (github.event.inputs.dry_run == 'true' || github.event.inputs.dry_run == null)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      run: |
        LIMIT=${{ github.event.inputs.limit || '10' }}
        VERBOSE_FLAG=${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }}
        
        echo "🧪 Running workflow assignment (DRY RUN)..."
        echo "Processing up to $LIMIT issues"
        
        python main.py assign-workflows \
          --config config.yaml \
          --limit "$LIMIT" \
          --dry-run \
          $VERBOSE_FLAG
    
    - name: Assign Workflows (Production)
      if: |
        github.event.inputs.statistics_only != 'true' && 
        github.event.inputs.dry_run == 'false' &&
        github.event_name != 'schedule'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      run: |
        LIMIT=${{ github.event.inputs.limit || '10' }}
        VERBOSE_FLAG=${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }}
        
        echo "🚀 Running workflow assignment (PRODUCTION)..."
        echo "Processing up to $LIMIT issues"
        
        python main.py assign-workflows \
          --config config.yaml \
          --limit "$LIMIT" \
          $VERBOSE_FLAG
    
    - name: Assign Workflows (Scheduled - Safe)
      if: github.event_name == 'schedule' && needs.check-assignment-needed.outputs.should_assign == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      run: |
        echo "⏰ Running scheduled workflow assignment..."
        echo "Processing up to 5 issues (safe limit for automated runs)"
        
        # Use conservative limit for scheduled runs
        python main.py assign-workflows \
          --config config.yaml \
          --limit 5 \
          --verbose
    
    - name: Verify monitor::triage cleared from assigned issues
      if: success()
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EVENT_NAME: ${{ github.event_name }}
        INPUT_DRY_RUN: ${{ github.event.inputs.dry_run }}
        INPUT_STATISTICS_ONLY: ${{ github.event.inputs.statistics_only }}
      run: |
        if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          if [ "${INPUT_STATISTICS_ONLY:-false}" = "true" ]; then
            echo "Skipping label validation for statistics-only dispatch."
            exit 0
          fi
          if [ "${INPUT_DRY_RUN:-true}" != "false" ]; then
            echo "Skipping label validation for dry-run dispatch."
            exit 0
          fi
        fi

        echo "🔍 Checking for issues stuck with monitor::triage after assignment..."
        STUCK_JSON=$(gh issue list --state open --label "monitor::triage" --label "state::assigned" --json number --limit 200)
        STUCK_COUNT=$(echo "$STUCK_JSON" | python -c 'import sys, json; data = json.loads(sys.stdin.read() or "[]"); print(len(data))')
        if [ "$STUCK_COUNT" -gt 0 ]; then
          echo "❌ Found $STUCK_COUNT issues still labeled monitor::triage after assignment."
          exit 1
        fi
        echo "✅ monitor::triage cleared from assigned issues"

    - name: Create Summary Report
      if: github.event.inputs.statistics_only != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      run: |
        echo "📊 Final Statistics After Processing:"
        python main.py assign-workflows --config config.yaml --statistics
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Workflow Assignment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Discovery-state issues before:** ${{ needs.check-assignment-needed.outputs.discovery_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**monitor::triage issues before:** ${{ needs.check-assignment-needed.outputs.triage_count }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "**Limit:** ${{ github.event.inputs.limit || '10' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Statistics Only:** ${{ github.event.inputs.statistics_only || 'false' }}" >> $GITHUB_STEP_SUMMARY
        fi